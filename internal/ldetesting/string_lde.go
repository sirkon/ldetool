// Code generated by ldetool --package ldetesting --go-string string.lde. DO NOT EDIT.

package ldetesting

import (
	"fmt"
	ip "net"
	"strconv"
	"strings"
	time "time"
)

var constBeforeLookupAbc = "abc"
var constCheckPrefixAbc = "abc"
var constCustomAddrColonSpace = "addr: "
var constRegressionCheck1ChangeSpaceInternalSpaceStateSpace = "change internal state "
var constRegressionCheck1Lsbrck = "["
var constRegressionCheck1SpacePumpSpace = " Pump "
var constRegressionCheck1SpaceToSpace = " to "
var constRegressionCheck1StateSpaceChangeSpace = "State change "
var constRegressionCheck2StarsSpaceTimeColonSpace = "*** Time: "
var constRegressionCheck2UnrecognizedSequence = "ï»¿"
var constRegressionCheck3ColonC = ":c"
var constSilentAreasAmountColon = "Amount:"

// Rule ...
type Rule struct {
	Rest     string
	Data     string
	Signed   int
	Unsigned uint
	Str      string
}

// Extract ...
func (p *Rule) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmp string
	var tmpInt int64
	var tmpUint uint64

	// Checks if the rest starts with '[' and pass it
	if len(p.Rest) >= 1 && p.Rest[0] == '[' {
		p.Rest = p.Rest[1:]
	} else {
		return false, nil
	}

	// Take until ']' as Data(string)
	pos = strings.IndexByte(p.Rest, ']')
	if pos >= 0 {
		p.Data = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}

	// Checks if the rest starts with ' ' and pass it
	if len(p.Rest) >= 1 && p.Rest[0] == ' ' {
		p.Rest = p.Rest[1:]
	} else {
		return false, nil
	}

	// Take until ' ' as Signed(int)
	pos = strings.IndexByte(p.Rest, ' ')
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Signed(int): %s", tmp, err)
	}
	p.Signed = int(tmpInt)

	// Checks if the rest starts with ' ' and pass it
	if len(p.Rest) >= 1 && p.Rest[0] == ' ' {
		p.Rest = p.Rest[1:]
	} else {
		return false, nil
	}

	// Take until ' ' as Unsigned(uint)
	pos = strings.IndexByte(p.Rest, ' ')
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpUint, err = strconv.ParseUint(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Unsigned(uint): %s", tmp, err)
	}
	p.Unsigned = uint(tmpUint)

	// Take the rest as Str(str)
	p.Str = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// RegressionCheck1 ...
type RegressionCheck1 struct {
	Rest   string
	Time   string
	Pump   int8
	PState struct {
		Valid bool
		State string
	}
	IState struct {
		Valid bool
		State string
	}
}

// Extract ...
func (p *RegressionCheck1) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var iStateRest string
	var pStateRest string
	var pos int
	var tmp string
	var tmpInt int64

	// Take until " Pump " as Time(string)
	pos = strings.Index(p.Rest, constRegressionCheck1SpacePumpSpace)
	if pos >= 0 {
		p.Time = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constRegressionCheck1SpacePumpSpace):]
	} else {
		return false, nil
	}

	// Take until ' ' as Pump(int8)
	pos = -1
	for i, char := range p.Rest {
		if char == ' ' {
			pos = i
			break
		}
	}
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 8); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Pump(int8): %s", tmp, err)
	}
	p.Pump = int8(tmpInt)
	pStateRest = p.Rest

	// Checks if the rest starts with `"State change "` and pass it
	if strings.HasPrefix(pStateRest, constRegressionCheck1StateSpaceChangeSpace) {
		pStateRest = pStateRest[len(constRegressionCheck1StateSpaceChangeSpace):]
	} else {
		p.PState.Valid = false
		goto regressioncheck1PStateLabel
	}

	// Looking for " to " and then pass it
	pos = strings.Index(pStateRest, constRegressionCheck1SpaceToSpace)
	if pos >= 0 {
		pStateRest = pStateRest[pos+len(constRegressionCheck1SpaceToSpace):]
	} else {
		p.PState.Valid = false
		goto regressioncheck1PStateLabel
	}

	// Take until "[" as State(string)
	pos = strings.Index(pStateRest, constRegressionCheck1Lsbrck)
	if pos >= 0 {
		p.PState.State = pStateRest[:pos]
		pStateRest = pStateRest[pos+len(constRegressionCheck1Lsbrck):]
	} else {
		p.PState.Valid = false
		goto regressioncheck1PStateLabel
	}

	p.PState.Valid = true
	p.Rest = pStateRest
regressioncheck1PStateLabel:
	iStateRest = p.Rest

	// Checks if the rest starts with `"change internal state "` and pass it
	if strings.HasPrefix(iStateRest, constRegressionCheck1ChangeSpaceInternalSpaceStateSpace) {
		iStateRest = iStateRest[len(constRegressionCheck1ChangeSpaceInternalSpaceStateSpace):]
	} else {
		p.IState.Valid = false
		goto regressioncheck1IStateLabel
	}

	// Looking for " to " and then pass it
	pos = strings.Index(iStateRest, constRegressionCheck1SpaceToSpace)
	if pos >= 0 {
		iStateRest = iStateRest[pos+len(constRegressionCheck1SpaceToSpace):]
	} else {
		p.IState.Valid = false
		goto regressioncheck1IStateLabel
	}

	// Take the rest as State(string)
	p.IState.State = iStateRest
	iStateRest = iStateRest[len(iStateRest):]
	p.IState.Valid = true
	p.Rest = iStateRest
regressioncheck1IStateLabel:

	return true, nil
}

// GetPStateState ...
func (p *RegressionCheck1) GetPStateState() (res string) {
	if p.PState.Valid {
		res = p.PState.State
	}
	return
}

// GetIStateState ...
func (p *RegressionCheck1) GetIStateState() (res string) {
	if p.IState.Valid {
		res = p.IState.State
	}
	return
}

// RegressionCheck2 ...
type RegressionCheck2 struct {
	Rest string
	Time string
}

// Extract ...
func (p *RegressionCheck2) Extract(line string) (bool, error) {
	p.Rest = line

	// Checks if the rest starts with `"ï»¿"` and pass it
	if strings.HasPrefix(p.Rest, constRegressionCheck2UnrecognizedSequence) {
		p.Rest = p.Rest[len(constRegressionCheck2UnrecognizedSequence):]
	} else {
		return false, nil
	}

	// Checks if the rest starts with `"*** Time: "` and pass it
	if strings.HasPrefix(p.Rest, constRegressionCheck2StarsSpaceTimeColonSpace) {
		p.Rest = p.Rest[len(constRegressionCheck2StarsSpaceTimeColonSpace):]
	} else {
		return false, nil
	}

	// Take the rest as Time(string)
	p.Time = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// RegressionCheck3 ...
type RegressionCheck3 struct {
	Rest string
}

// Extract ...
func (p *RegressionCheck3) Extract(line string) (bool, error) {
	p.Rest = line

	// Checks if rest[1:] starts with 'b'
	if len(p.Rest) < 1+1 || p.Rest[1] != 'b' {
		return false, nil
	}

	// Checks if rest[2:] starts with `":c"`
	if len(p.Rest) < 2+len(constRegressionCheck3ColonC) || !strings.HasPrefix(p.Rest[2:], constRegressionCheck3ColonC) {
		return false, nil
	}

	return true, nil
}

// BeforeLookup ...
type BeforeLookup struct {
	Rest string
	Data string
}

// Extract ...
func (p *BeforeLookup) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "abc" and then pass it
	pos = strings.Index(p.Rest, constBeforeLookupAbc)
	if pos >= 0 {
		p.Rest = p.Rest[pos:]
	} else {
		return false, nil
	}

	// Take the rest as Data(string)
	p.Data = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// CheckPrefix ...
type CheckPrefix struct {
	Rest string
	Data string
}

// Extract ...
func (p *CheckPrefix) Extract(line string) (bool, error) {
	p.Rest = line

	// Checks if the rest starts with `"abc"`
	if !strings.HasPrefix(p.Rest, constCheckPrefixAbc) {
		return false, nil
	}

	// Take the rest as Data(string)
	p.Data = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// PassHeadingStringRegression ...
type PassHeadingStringRegression struct {
	Rest string
	Data string
}

// Extract ...
func (p *PassHeadingStringRegression) Extract(line string) (bool, error) {
	p.Rest = line
	var headPassCounter int
	var headPassValue rune

	// Pass all characters '#' at the rest start
	for headPassCounter, headPassValue = range string(p.Rest) {
		if headPassValue != '#' {
			break
		}
	}
	if headPassCounter > 0 {
		p.Rest = p.Rest[headPassCounter:]
	}

	// Take the rest as Data(string)
	p.Data = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// Custom ...
type Custom struct {
	Rest string
	Time time.Time
	Addr struct {
		Valid bool
		IP    ip.IP
	}
}

// Extract ...
func (p *Custom) Extract(line string) (bool, error) {
	p.Rest = line
	var addrRest string
	var err error
	var pos int
	var tmp string

	// Take until ' ' as Time(time.Time)
	pos = strings.IndexByte(p.Rest, ' ')
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}
	if p.Time, err = p.unmarshalTime(tmp); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Time(time.Time): %s", tmp, err)
	}
	addrRest = p.Rest

	// Checks if the rest starts with `"addr: "` and pass it
	if strings.HasPrefix(addrRest, constCustomAddrColonSpace) {
		addrRest = addrRest[len(constCustomAddrColonSpace):]
	} else {
		p.Addr.Valid = false
		goto customAddrLabel
	}

	// Take until ' ' as IP(ip.IP)
	pos = strings.IndexByte(addrRest, ' ')
	if pos >= 0 {
		tmp = addrRest[:pos]
		addrRest = addrRest[pos+1:]
	} else {
		p.Addr.Valid = false
		goto customAddrLabel
	}
	if p.Addr.IP, err = p.unmarshalAddrIP(tmp); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Addr.IP(ip.IP): %s", tmp, err)
	}

	p.Addr.Valid = true
	p.Rest = addrRest
customAddrLabel:

	return true, nil
}

// GetAddrIP ...
func (p *Custom) GetAddrIP() (res ip.IP) {
	if p.Addr.Valid {
		res = p.Addr.IP
	}
	return
}

// CustomBuiltin ...
type CustomBuiltin struct {
	Rest  string
	Field int
}

// Extract ...
func (p *CustomBuiltin) Extract(line string) (bool, error) {
	p.Rest = line
	var err error

	// Take the rest as Field($int)
	if p.Field, err = p.unmarshalField(p.Rest); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Field(int): %s", p.Rest, err)
	}
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// Boolean ...
type Boolean struct {
	Rest  string
	Check bool
}

// Extract ...
func (p *Boolean) Extract(line string) (bool, error) {
	p.Rest = line
	var err error

	// Take the rest as Check(bool)
	if p.Check, err = p.unmarshalCheck(p.Rest); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Check(bool): %s", p.Rest, err)
	}
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// SilentAreas ...
type SilentAreas struct {
	Rest string
	Alt1 struct {
		Valid  bool
		Amount int
	}
	Alt2 struct {
		Valid  bool
		Amount string
	}
}

// Extract ...
func (p *SilentAreas) Extract(line string) (bool, error) {
	p.Rest = line
	var alt1Rest string
	var alt2Rest string
	var err error
	var tmpInt int64
	alt1Rest = p.Rest

	// Checks if the rest starts with `"Amount:"` and pass it
	if strings.HasPrefix(alt1Rest, constSilentAreasAmountColon) {
		alt1Rest = alt1Rest[len(constSilentAreasAmountColon):]
	} else {
		p.Alt1.Valid = false
		goto silentareasAlt1Label
	}

	// Take the rest as Amount(int)
	if tmpInt, err = strconv.ParseInt(alt1Rest, 10, 64); err != nil {
		p.Alt1.Valid = false
		goto silentareasAlt1Label
	}
	p.Alt1.Amount = int(tmpInt)
	alt1Rest = alt1Rest[len(alt1Rest):]
	// Check if the rest is empty
	if len(alt1Rest) != 0 {
		p.Alt1.Valid = false
		goto silentareasAlt1Label
	}

	p.Alt1.Valid = true
	p.Rest = alt1Rest
silentareasAlt1Label:
	alt2Rest = p.Rest

	// Checks if the rest starts with `"Amount:"` and pass it
	if strings.HasPrefix(alt2Rest, constSilentAreasAmountColon) {
		alt2Rest = alt2Rest[len(constSilentAreasAmountColon):]
	} else {
		p.Alt2.Valid = false
		goto silentareasAlt2Label
	}

	// Take the rest as Amount(string)
	p.Alt2.Amount = alt2Rest
	alt2Rest = alt2Rest[len(alt2Rest):]
	// Check if the rest is empty
	if len(alt2Rest) != 0 {
		p.Alt2.Valid = false
		goto silentareasAlt2Label
	}

	p.Alt2.Valid = true
	p.Rest = alt2Rest
silentareasAlt2Label:

	return true, nil
}

// GetAlt1Amount ...
func (p *SilentAreas) GetAlt1Amount() (res int) {
	if p.Alt1.Valid {
		res = p.Alt1.Amount
	}
	return
}

// GetAlt2Amount ...
func (p *SilentAreas) GetAlt2Amount() (res string) {
	if p.Alt2.Valid {
		res = p.Alt2.Amount
	}
	return
}

// TrickyDateParsing ...
type TrickyDateParsing struct {
	Rest string
	Full struct {
		Valid     bool
		Day       int
		Month     int
		Year      int
		Hour      int
		Minute    int
		Second    int
		Microsecs int
	}
	Hour struct {
		Valid     bool
		Hour      int
		Minute    int
		Second    int
		Microsecs int
	}
	Seconds struct {
		Valid     bool
		Second    int
		Microsecs int
	}
}

// Extract ...
func (p *TrickyDateParsing) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var fullRest string
	var hourRest string
	var secondsRest string
	var tmp string
	var tmpInt int64
	fullRest = p.Rest

	// Take until 3rd character  if it is equal to '/' character as Day(int)
	if len(fullRest) < 2+1 || fullRest[2] != '/' {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	tmp = fullRest[:2]
	fullRest = fullRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Day = int(tmpInt)

	// Take until 3rd character  if it is equal to '/' character as Month(int)
	if len(fullRest) < 2+1 || fullRest[2] != '/' {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	tmp = fullRest[:2]
	fullRest = fullRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Month = int(tmpInt)

	// Take until 5th character  if it is equal to ' ' character as Year(int)
	if len(fullRest) < 4+1 || fullRest[4] != ' ' {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	tmp = fullRest[:4]
	fullRest = fullRest[4+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Year = int(tmpInt)

	// Take until 3rd character  if it is equal to ':' character as Hour(int)
	if len(fullRest) < 2+1 || fullRest[2] != ':' {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	tmp = fullRest[:2]
	fullRest = fullRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Hour = int(tmpInt)

	// Take until 3rd character  if it is equal to ':' character as Minute(int)
	if len(fullRest) < 2+1 || fullRest[2] != ':' {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	tmp = fullRest[:2]
	fullRest = fullRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Minute = int(tmpInt)

	// Take until 3rd character  if it is equal to '.' character as Second(int)
	if len(fullRest) < 2+1 || fullRest[2] != '.' {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	tmp = fullRest[:2]
	fullRest = fullRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Second = int(tmpInt)

	// Take the rest as Microsecs(int)
	if tmpInt, err = strconv.ParseInt(fullRest, 10, 64); err != nil {
		p.Full.Valid = false
		goto trickydateparsingFullLabel
	}
	p.Full.Microsecs = int(tmpInt)
	fullRest = fullRest[len(fullRest):]
	p.Full.Valid = true
	p.Rest = fullRest
trickydateparsingFullLabel:
	hourRest = p.Rest

	// Take until 3rd character  if it is equal to ':' character as Hour(int)
	if len(hourRest) < 2+1 || hourRest[2] != ':' {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	tmp = hourRest[:2]
	hourRest = hourRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	p.Hour.Hour = int(tmpInt)

	// Take until 3rd character  if it is equal to ':' character as Minute(int)
	if len(hourRest) < 2+1 || hourRest[2] != ':' {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	tmp = hourRest[:2]
	hourRest = hourRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	p.Hour.Minute = int(tmpInt)

	// Take until 3rd character  if it is equal to '.' character as Second(int)
	if len(hourRest) < 2+1 || hourRest[2] != '.' {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	tmp = hourRest[:2]
	hourRest = hourRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	p.Hour.Second = int(tmpInt)

	// Take the rest as Microsecs(int)
	if tmpInt, err = strconv.ParseInt(hourRest, 10, 64); err != nil {
		p.Hour.Valid = false
		goto trickydateparsingHourLabel
	}
	p.Hour.Microsecs = int(tmpInt)
	hourRest = hourRest[len(hourRest):]
	p.Hour.Valid = true
	p.Rest = hourRest
trickydateparsingHourLabel:
	secondsRest = p.Rest

	// Take until 3rd character  if it is equal to '.' character as Second(int)
	if len(secondsRest) < 2+1 || secondsRest[2] != '.' {
		p.Seconds.Valid = false
		goto trickydateparsingSecondsLabel
	}
	tmp = secondsRest[:2]
	secondsRest = secondsRest[2+1:]
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		p.Seconds.Valid = false
		goto trickydateparsingSecondsLabel
	}
	p.Seconds.Second = int(tmpInt)

	// Take the rest as Microsecs(int)
	if tmpInt, err = strconv.ParseInt(secondsRest, 10, 64); err != nil {
		p.Seconds.Valid = false
		goto trickydateparsingSecondsLabel
	}
	p.Seconds.Microsecs = int(tmpInt)
	secondsRest = secondsRest[len(secondsRest):]
	p.Seconds.Valid = true
	p.Rest = secondsRest
trickydateparsingSecondsLabel:

	// Check if the rest is empty
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}

// GetFullDay ...
func (p *TrickyDateParsing) GetFullDay() (res int) {
	if p.Full.Valid {
		res = p.Full.Day
	}
	return
}

// GetFullMonth ...
func (p *TrickyDateParsing) GetFullMonth() (res int) {
	if p.Full.Valid {
		res = p.Full.Month
	}
	return
}

// GetFullYear ...
func (p *TrickyDateParsing) GetFullYear() (res int) {
	if p.Full.Valid {
		res = p.Full.Year
	}
	return
}

// GetFullHour ...
func (p *TrickyDateParsing) GetFullHour() (res int) {
	if p.Full.Valid {
		res = p.Full.Hour
	}
	return
}

// GetFullMinute ...
func (p *TrickyDateParsing) GetFullMinute() (res int) {
	if p.Full.Valid {
		res = p.Full.Minute
	}
	return
}

// GetFullSecond ...
func (p *TrickyDateParsing) GetFullSecond() (res int) {
	if p.Full.Valid {
		res = p.Full.Second
	}
	return
}

// GetFullMicrosecs ...
func (p *TrickyDateParsing) GetFullMicrosecs() (res int) {
	if p.Full.Valid {
		res = p.Full.Microsecs
	}
	return
}

// GetHourHour ...
func (p *TrickyDateParsing) GetHourHour() (res int) {
	if p.Hour.Valid {
		res = p.Hour.Hour
	}
	return
}

// GetHourMinute ...
func (p *TrickyDateParsing) GetHourMinute() (res int) {
	if p.Hour.Valid {
		res = p.Hour.Minute
	}
	return
}

// GetHourSecond ...
func (p *TrickyDateParsing) GetHourSecond() (res int) {
	if p.Hour.Valid {
		res = p.Hour.Second
	}
	return
}

// GetHourMicrosecs ...
func (p *TrickyDateParsing) GetHourMicrosecs() (res int) {
	if p.Hour.Valid {
		res = p.Hour.Microsecs
	}
	return
}

// GetSecondsSecond ...
func (p *TrickyDateParsing) GetSecondsSecond() (res int) {
	if p.Seconds.Valid {
		res = p.Seconds.Second
	}
	return
}

// GetSecondsMicrosecs ...
func (p *TrickyDateParsing) GetSecondsMicrosecs() (res int) {
	if p.Seconds.Valid {
		res = p.Seconds.Microsecs
	}
	return
}
